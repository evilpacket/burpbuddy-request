// utility for writing values to the config file
// for later use.
// You can either pass config name, value to set and callback
// or an object with multiple key/value pairs to set and a callback.
// You can "delete" keys by setting them to "".
// If the resulting config object is empty, the config file will simply
// be deleted instead.
var fs = require('fs');
var path = require('path');
var tryIt = require('tryit');
var isObject = require('amp-is-object');
var isEmpty = require('amp-is-empty');
var extend = require('amp-extend');

var isWindows = process.platform === 'win32';
var home = isWindows ? process.env.USERPROFILE : process.env.HOME;
var FILE_NAME = path.join(home, '.requiresaferc');


module.exports = function (name, value, callback) {
    var newSettings = name;
    var current = {};

    // allow either name/value/callback or object/callback arguments
    if (isObject(newSettings)) {
        callback = value;
    } else {
        newSettings = {};
        newSettings[name] = value;
    }

    // attempt to read in a current config file
    tryIt(function () {
        current = JSON.parse(fs.readFileSync(FILE_NAME, 'utf8'));
    });

    // extend current config with our new stuff
    extend(current, newSettings);

    // this lets us "delete" things by
    // setting their keys as empty string
    for (var item in current) {
        if (current[item] === '') {
            delete current[item];
        }
    }

    // if it's empty delete the config file entirely to clean up
    // after ourselves.
    if (isEmpty(current)) {
        if (fs.existsSync(FILE_NAME)) {
            return fs.unlink(FILE_NAME, callback);    
        } else {
            return callback(null);
        }
    } else {
        // try to write it back
        fs.writeFile(FILE_NAME, JSON.stringify(current, null, 2), 'utf8', callback);
    }
};
