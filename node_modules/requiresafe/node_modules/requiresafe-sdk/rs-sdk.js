var request = require('request');
var extend = require('amp-extend');
var defaults = require('amp-defaults');
var each = require('amp-each');
var last = require('amp-last');
var isObject = require('amp-is-object');
var toArray = require('amp-to-array');
var qs = require('querystring');

var SDK = function SDK(options) {
    this.config = extend({}, defaults(options, {
        baseUrl: 'https://api.requiresafe.com/api/v1',
        acceptType: 'text/plain',
        authToken: undefined,
        organization: {},
        local: false,
        proxy: false
    }));

    if (this.config.local) {
        this.config.baseUrl = 'http://localhost:3001/api/v1';
    }
};

var methods = {
    // registers an email address that will be sent
    // a URL and a token. The url can be used to confirm
    // email on web, the token can be used to complete
    // signup through the CLI (in createUser)
    signup: {
        url: '/users/signup',
        args: ['user'],
        method: 'post'
    },
    logout: {
        url: '/users/logout',
        args: ['callback'],
        method: 'post'
    },
    checkDependencies: {
        url: '/projects/check',
        args: ['project', 'callback'],
        method: 'post'
    },
    users: {
        url: '/users',
        args: ['organizationId', 'callback'],
        method: 'get'
    },
    me: {
        url: '/users/me',
        args: ['callback'],
        method: 'get',
        auth: 'required'
    },
    requestPasswordResetToken: {
        url: '/users/reset-password',
        args: ['user'],
        method: 'post'
    }
};

// for prettiness in browser debuggers
SDK.prototype.displayName = 'requireSafe API';
SDK.prototype.version = require('./package.json').version;

// loop through our metadata and build out our prototype
each(methods, function (obj, methodName) {
    getPayload = function (names, args) {
        var result = {};
        args = toArray(args);
        if (names.length === args.length) {
            each(names, function (name, index) {
                result[name] = args[index];
            });
            return result;
        } else {
            each(args, function (arg, index) {
                result[names[index]] = arg;
            });
            result.callback = last(args);
            return result;
        }
    };

    SDK.prototype[methodName] = function () {
        var callback = last(arguments);

        this._makeRequest(obj.method.toLowerCase(), obj.url, getPayload(obj.args, arguments), callback);
    };
});

SDK.prototype.createUser = function (token, user, callback) {
    this._makeRequest('post', '/users?token=' + token, { user: user }, callback);
};


SDK.prototype.login = function (email, password, callback) {
    var self = this;
    var user;

    if (isObject(email)) {
        user = email;
        callback = password;
    } else {
        user = {
            email: email,
            password: password
        }
    }

    this._makeRequest('post', '/users/login', user, function (err, body) {
        if (err) {
            return callback(err);
        }

        if (body && body.authToken) {
            self.config.authToken = body.authToken;
        }

        callback(null, body);
    });
};

SDK.prototype.hasToken = function () {
    return !!this.config.authToken;
};

SDK.prototype.validateToken = function (callback) {
    this.me(function (err, me) {
        if (err) { return callback(err); }
        return callback(null, !!(me.user && me.user.id));
    });
};

SDK.prototype._makeRequest = function (method, url, payload, callback) {
    method = method.toUpperCase();

    var config = {
        method: method,
        url: this.config.baseUrl + url,
        headers: {
            'X-SDK-VERSION': this.version,
            accept: this.config.acceptType
        }
    };

    if (this.config.authToken) {
        config.headers["Authorization"] = "Bearer " + this.config.authToken;
    }

    if (payload) {
        if (method === 'GET') {
            config.url += '?' + qs.stringify(payload);
        } else {
            config.json = payload;
        }
    }

    if (this.config.proxy) {
        config.proxy = this.config.proxy;
        config.tunnel = false;
        config.strictSSL = false;
    }

    request(config, function (err, res, body) {
        if (err) {
            return callback(err);
        }

        if (typeof body == 'string') {
            try {
                body = JSON.parse(body);
            } catch (e) {
            }
        }

        if (res.statusCode >= 400) {
            if (body && body.error) {
                return callback(body);
            } else {
                return callback({
                    statusCode: res.statusCode,
                    error: "Unknown",
                    message: "An error occurred" });
            }
        }

        callback(null, body);
    });
};

SDK.prototype.updateUser = function (user, callback) {
    this._makeRequest('post', '/users/' + user.id, user, callback);
};

SDK.prototype.resetPassword = function (token, user, callback) {
    this._makeRequest('post', '/users/reset-password/' + token, { user: user }, callback);
};

SDK.prototype.updateUserPassword = function (user, callback) {
    this._makeRequest('post', '/users/' + user.id + '/password', user, callback);
};

SDK.prototype.getAdvisories = function (query, callback) {
    this._makeRequest('get', '/advisories', query, callback);
};

SDK.prototype.updateEmailSettings = function (userId, settings, callback) {
    this._makeRequest('post', '/users/' + userId + '/email-settings', settings, callback);
};

module.exports = SDK;
